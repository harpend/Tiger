//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\jackt\OneDrive\Documents\Compilers\Tiger\Tiger\ANTLR\Tiger.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Tiger.ANTLR {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class TigerLexer : Lexer {
	public const int
		COMMENT=1, IMPORT=2, INT=3, STRING=4, WHILE=5, FOR=6, TO=7, BREAK=8, LET=9, 
		IN=10, END=11, FUNCTION=12, VAR=13, TYPE=14, ARRAY=15, IF=16, THEN=17, 
		ELSE=18, DO=19, OF=20, NIL=21, PLUS=22, MINUS=23, DIV=24, MULT=25, LT=26, 
		GT=27, LE=28, GE=29, EQ=30, NE=31, AND=32, OR=33, ASGN=34, COMMA=35, COLON=36, 
		SC=37, LPAREN=38, RPAREN=39, LBRACKET=40, RBRACKET=41, LBRACE=42, RBRACE=43, 
		DOT=44, ID=45, INTLIT=46, STRLIT=47, WS=48;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"COMMENT", "IMPORT", "INT", "STRING", "WHILE", "FOR", "TO", "BREAK", "LET", 
		"IN", "END", "FUNCTION", "VAR", "TYPE", "ARRAY", "IF", "THEN", "ELSE", 
		"DO", "OF", "NIL", "PLUS", "MINUS", "DIV", "MULT", "LT", "GT", "LE", "GE", 
		"EQ", "NE", "AND", "OR", "ASGN", "COMMA", "COLON", "SC", "LPAREN", "RPAREN", 
		"LBRACKET", "RBRACKET", "LBRACE", "RBRACE", "DOT", "ID", "INTLIT", "STRLIT", 
		"WS"
	};


	public TigerLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'import'", "'int'", "'string'", "'while'", "'for'", "'to'", 
		"'break'", "'let'", "'in'", "'end'", "'fn'", "'var'", "'type'", "'array'", 
		"'if'", "'then'", "'else'", "'do'", "'of'", "'nil'", "'+'", "'-'", "'/'", 
		"'*'", "'<'", "'>'", "'<='", "'>='", "'='", "'!='", "'&&'", "'||'", "':='", 
		"','", "':'", "';'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "IMPORT", "INT", "STRING", "WHILE", "FOR", "TO", "BREAK", 
		"LET", "IN", "END", "FUNCTION", "VAR", "TYPE", "ARRAY", "IF", "THEN", 
		"ELSE", "DO", "OF", "NIL", "PLUS", "MINUS", "DIV", "MULT", "LT", "GT", 
		"LE", "GE", "EQ", "NE", "AND", "OR", "ASGN", "COMMA", "COLON", "SC", "LPAREN", 
		"RPAREN", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", "DOT", "ID", "INTLIT", 
		"STRLIT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tiger.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x32\x11B\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x4\x1B\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 "+
		"\t \x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t"+
		")\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\a\x2h\n\x2\f\x2\xE\x2k\v\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\r\x3"+
		"\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3"+
		"\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3"+
		"\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3 \x3!"+
		"\x3!\x3!\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3$\x3$\x3%\x3%\x3&\x3&\x3\'\x3\'"+
		"\x3(\x3(\x3)\x3)\x3*\x3*\x3+\x3+\x3,\x3,\x3-\x3-\x3.\x3.\a.\x100\n.\f"+
		".\xE.\x103\v.\x3/\x6/\x106\n/\r/\xE/\x107\x3\x30\x3\x30\x3\x30\x3\x30"+
		"\a\x30\x10E\n\x30\f\x30\xE\x30\x111\v\x30\x3\x30\x3\x30\x3\x31\x6\x31"+
		"\x116\n\x31\r\x31\xE\x31\x117\x3\x31\x3\x31\x2\x2\x2\x32\x3\x2\x3\x5\x2"+
		"\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17"+
		"\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14"+
		"\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2"+
		"\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45\x2$"+
		"G\x2%I\x2&K\x2\'M\x2(O\x2)Q\x2*S\x2+U\x2,W\x2-Y\x2.[\x2/]\x2\x30_\x2\x31"+
		"\x61\x2\x32\x3\x2\b\x4\x2\f\f\xF\xF\x4\x2\x43\\\x63|\x6\x2\x32;\x43\\"+
		"\x61\x61\x63|\x3\x2\x32;\x4\x2$$^^\x5\x2\v\f\xF\xF\"\"\x120\x2\x3\x3\x2"+
		"\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2"+
		"\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3"+
		"\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2"+
		"\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2"+
		"\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+"+
		"\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33"+
		"\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2"+
		"\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2"+
		"\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2"+
		"K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3\x2\x2\x2\x2Q\x3\x2\x2\x2\x2S\x3\x2"+
		"\x2\x2\x2U\x3\x2\x2\x2\x2W\x3\x2\x2\x2\x2Y\x3\x2\x2\x2\x2[\x3\x2\x2\x2"+
		"\x2]\x3\x2\x2\x2\x2_\x3\x2\x2\x2\x2\x61\x3\x2\x2\x2\x3\x63\x3\x2\x2\x2"+
		"\x5p\x3\x2\x2\x2\aw\x3\x2\x2\x2\t{\x3\x2\x2\x2\v\x82\x3\x2\x2\x2\r\x88"+
		"\x3\x2\x2\x2\xF\x8C\x3\x2\x2\x2\x11\x8F\x3\x2\x2\x2\x13\x95\x3\x2\x2\x2"+
		"\x15\x99\x3\x2\x2\x2\x17\x9C\x3\x2\x2\x2\x19\xA0\x3\x2\x2\x2\x1B\xA3\x3"+
		"\x2\x2\x2\x1D\xA7\x3\x2\x2\x2\x1F\xAC\x3\x2\x2\x2!\xB2\x3\x2\x2\x2#\xB5"+
		"\x3\x2\x2\x2%\xBA\x3\x2\x2\x2\'\xBF\x3\x2\x2\x2)\xC2\x3\x2\x2\x2+\xC5"+
		"\x3\x2\x2\x2-\xC9\x3\x2\x2\x2/\xCB\x3\x2\x2\x2\x31\xCD\x3\x2\x2\x2\x33"+
		"\xCF\x3\x2\x2\x2\x35\xD1\x3\x2\x2\x2\x37\xD3\x3\x2\x2\x2\x39\xD5\x3\x2"+
		"\x2\x2;\xD8\x3\x2\x2\x2=\xDB\x3\x2\x2\x2?\xDD\x3\x2\x2\x2\x41\xE0\x3\x2"+
		"\x2\x2\x43\xE3\x3\x2\x2\x2\x45\xE6\x3\x2\x2\x2G\xE9\x3\x2\x2\x2I\xEB\x3"+
		"\x2\x2\x2K\xED\x3\x2\x2\x2M\xEF\x3\x2\x2\x2O\xF1\x3\x2\x2\x2Q\xF3\x3\x2"+
		"\x2\x2S\xF5\x3\x2\x2\x2U\xF7\x3\x2\x2\x2W\xF9\x3\x2\x2\x2Y\xFB\x3\x2\x2"+
		"\x2[\xFD\x3\x2\x2\x2]\x105\x3\x2\x2\x2_\x109\x3\x2\x2\x2\x61\x115\x3\x2"+
		"\x2\x2\x63\x64\a\x31\x2\x2\x64\x65\a\x31\x2\x2\x65i\x3\x2\x2\x2\x66h\n"+
		"\x2\x2\x2g\x66\x3\x2\x2\x2hk\x3\x2\x2\x2ig\x3\x2\x2\x2ij\x3\x2\x2\x2j"+
		"l\x3\x2\x2\x2ki\x3\x2\x2\x2lm\a\f\x2\x2mn\x3\x2\x2\x2no\b\x2\x2\x2o\x4"+
		"\x3\x2\x2\x2pq\ak\x2\x2qr\ao\x2\x2rs\ar\x2\x2st\aq\x2\x2tu\at\x2\x2uv"+
		"\av\x2\x2v\x6\x3\x2\x2\x2wx\ak\x2\x2xy\ap\x2\x2yz\av\x2\x2z\b\x3\x2\x2"+
		"\x2{|\au\x2\x2|}\av\x2\x2}~\at\x2\x2~\x7F\ak\x2\x2\x7F\x80\ap\x2\x2\x80"+
		"\x81\ai\x2\x2\x81\n\x3\x2\x2\x2\x82\x83\ay\x2\x2\x83\x84\aj\x2\x2\x84"+
		"\x85\ak\x2\x2\x85\x86\an\x2\x2\x86\x87\ag\x2\x2\x87\f\x3\x2\x2\x2\x88"+
		"\x89\ah\x2\x2\x89\x8A\aq\x2\x2\x8A\x8B\at\x2\x2\x8B\xE\x3\x2\x2\x2\x8C"+
		"\x8D\av\x2\x2\x8D\x8E\aq\x2\x2\x8E\x10\x3\x2\x2\x2\x8F\x90\a\x64\x2\x2"+
		"\x90\x91\at\x2\x2\x91\x92\ag\x2\x2\x92\x93\a\x63\x2\x2\x93\x94\am\x2\x2"+
		"\x94\x12\x3\x2\x2\x2\x95\x96\an\x2\x2\x96\x97\ag\x2\x2\x97\x98\av\x2\x2"+
		"\x98\x14\x3\x2\x2\x2\x99\x9A\ak\x2\x2\x9A\x9B\ap\x2\x2\x9B\x16\x3\x2\x2"+
		"\x2\x9C\x9D\ag\x2\x2\x9D\x9E\ap\x2\x2\x9E\x9F\a\x66\x2\x2\x9F\x18\x3\x2"+
		"\x2\x2\xA0\xA1\ah\x2\x2\xA1\xA2\ap\x2\x2\xA2\x1A\x3\x2\x2\x2\xA3\xA4\a"+
		"x\x2\x2\xA4\xA5\a\x63\x2\x2\xA5\xA6\at\x2\x2\xA6\x1C\x3\x2\x2\x2\xA7\xA8"+
		"\av\x2\x2\xA8\xA9\a{\x2\x2\xA9\xAA\ar\x2\x2\xAA\xAB\ag\x2\x2\xAB\x1E\x3"+
		"\x2\x2\x2\xAC\xAD\a\x63\x2\x2\xAD\xAE\at\x2\x2\xAE\xAF\at\x2\x2\xAF\xB0"+
		"\a\x63\x2\x2\xB0\xB1\a{\x2\x2\xB1 \x3\x2\x2\x2\xB2\xB3\ak\x2\x2\xB3\xB4"+
		"\ah\x2\x2\xB4\"\x3\x2\x2\x2\xB5\xB6\av\x2\x2\xB6\xB7\aj\x2\x2\xB7\xB8"+
		"\ag\x2\x2\xB8\xB9\ap\x2\x2\xB9$\x3\x2\x2\x2\xBA\xBB\ag\x2\x2\xBB\xBC\a"+
		"n\x2\x2\xBC\xBD\au\x2\x2\xBD\xBE\ag\x2\x2\xBE&\x3\x2\x2\x2\xBF\xC0\a\x66"+
		"\x2\x2\xC0\xC1\aq\x2\x2\xC1(\x3\x2\x2\x2\xC2\xC3\aq\x2\x2\xC3\xC4\ah\x2"+
		"\x2\xC4*\x3\x2\x2\x2\xC5\xC6\ap\x2\x2\xC6\xC7\ak\x2\x2\xC7\xC8\an\x2\x2"+
		"\xC8,\x3\x2\x2\x2\xC9\xCA\a-\x2\x2\xCA.\x3\x2\x2\x2\xCB\xCC\a/\x2\x2\xCC"+
		"\x30\x3\x2\x2\x2\xCD\xCE\a\x31\x2\x2\xCE\x32\x3\x2\x2\x2\xCF\xD0\a,\x2"+
		"\x2\xD0\x34\x3\x2\x2\x2\xD1\xD2\a>\x2\x2\xD2\x36\x3\x2\x2\x2\xD3\xD4\a"+
		"@\x2\x2\xD4\x38\x3\x2\x2\x2\xD5\xD6\a>\x2\x2\xD6\xD7\a?\x2\x2\xD7:\x3"+
		"\x2\x2\x2\xD8\xD9\a@\x2\x2\xD9\xDA\a?\x2\x2\xDA<\x3\x2\x2\x2\xDB\xDC\a"+
		"?\x2\x2\xDC>\x3\x2\x2\x2\xDD\xDE\a#\x2\x2\xDE\xDF\a?\x2\x2\xDF@\x3\x2"+
		"\x2\x2\xE0\xE1\a(\x2\x2\xE1\xE2\a(\x2\x2\xE2\x42\x3\x2\x2\x2\xE3\xE4\a"+
		"~\x2\x2\xE4\xE5\a~\x2\x2\xE5\x44\x3\x2\x2\x2\xE6\xE7\a<\x2\x2\xE7\xE8"+
		"\a?\x2\x2\xE8\x46\x3\x2\x2\x2\xE9\xEA\a.\x2\x2\xEAH\x3\x2\x2\x2\xEB\xEC"+
		"\a<\x2\x2\xECJ\x3\x2\x2\x2\xED\xEE\a=\x2\x2\xEEL\x3\x2\x2\x2\xEF\xF0\a"+
		"*\x2\x2\xF0N\x3\x2\x2\x2\xF1\xF2\a+\x2\x2\xF2P\x3\x2\x2\x2\xF3\xF4\a]"+
		"\x2\x2\xF4R\x3\x2\x2\x2\xF5\xF6\a_\x2\x2\xF6T\x3\x2\x2\x2\xF7\xF8\a}\x2"+
		"\x2\xF8V\x3\x2\x2\x2\xF9\xFA\a\x7F\x2\x2\xFAX\x3\x2\x2\x2\xFB\xFC\a\x30"+
		"\x2\x2\xFCZ\x3\x2\x2\x2\xFD\x101\t\x3\x2\x2\xFE\x100\t\x4\x2\x2\xFF\xFE"+
		"\x3\x2\x2\x2\x100\x103\x3\x2\x2\x2\x101\xFF\x3\x2\x2\x2\x101\x102\x3\x2"+
		"\x2\x2\x102\\\x3\x2\x2\x2\x103\x101\x3\x2\x2\x2\x104\x106\t\x5\x2\x2\x105"+
		"\x104\x3\x2\x2\x2\x106\x107\x3\x2\x2\x2\x107\x105\x3\x2\x2\x2\x107\x108"+
		"\x3\x2\x2\x2\x108^\x3\x2\x2\x2\x109\x10F\a$\x2\x2\x10A\x10E\n\x6\x2\x2"+
		"\x10B\x10C\a^\x2\x2\x10C\x10E\v\x2\x2\x2\x10D\x10A\x3\x2\x2\x2\x10D\x10B"+
		"\x3\x2\x2\x2\x10E\x111\x3\x2\x2\x2\x10F\x10D\x3\x2\x2\x2\x10F\x110\x3"+
		"\x2\x2\x2\x110\x112\x3\x2\x2\x2\x111\x10F\x3\x2\x2\x2\x112\x113\a$\x2"+
		"\x2\x113`\x3\x2\x2\x2\x114\x116\t\a\x2\x2\x115\x114\x3\x2\x2\x2\x116\x117"+
		"\x3\x2\x2\x2\x117\x115\x3\x2\x2\x2\x117\x118\x3\x2\x2\x2\x118\x119\x3"+
		"\x2\x2\x2\x119\x11A\b\x31\x2\x2\x11A\x62\x3\x2\x2\x2\t\x2i\x101\x107\x10D"+
		"\x10F\x117\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Tiger.ANTLR
