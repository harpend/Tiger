//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\jackt\OneDrive\Documents\Compilers\Tiger\Tiger\ANTLR\Tiger.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Tiger.ANTLR {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ITigerListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class TigerBaseListener : ITigerListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] TigerParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] TigerParser.ProgramContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLine([NotNull] TigerParser.LineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLine([NotNull] TigerParser.LineContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] TigerParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] TigerParser.StatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.ifStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStmt([NotNull] TigerParser.IfStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.ifStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStmt([NotNull] TigerParser.IfStmtContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.elseIfStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElseIfStmt([NotNull] TigerParser.ElseIfStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.elseIfStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElseIfStmt([NotNull] TigerParser.ElseIfStmtContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] TigerParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] TigerParser.BlockContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.whileStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStmt([NotNull] TigerParser.WhileStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.whileStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStmt([NotNull] TigerParser.WhileStmtContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignment([NotNull] TigerParser.AssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignment([NotNull] TigerParser.AssignmentContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType([NotNull] TigerParser.TypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType([NotNull] TigerParser.TypeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCall([NotNull] TigerParser.FunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCall([NotNull] TigerParser.FunctionCallContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] TigerParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] TigerParser.ExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.mathOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMathOp([NotNull] TigerParser.MathOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.mathOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMathOp([NotNull] TigerParser.MathOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.boolOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolOp([NotNull] TigerParser.BoolOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.boolOp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolOp([NotNull] TigerParser.BoolOpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstant([NotNull] TigerParser.ConstantContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstant([NotNull] TigerParser.ConstantContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace Tiger.ANTLR
