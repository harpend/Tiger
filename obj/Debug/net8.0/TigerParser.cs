//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\jackt\OneDrive\Documents\Compilers\Tiger\Tiger\ANTLR\Tiger.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Tiger.ANTLR {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class TigerParser : Parser {
	public const int
		COMMENT=1, IMPORT=2, INT=3, STRING=4, WHILE=5, FOR=6, TO=7, BREAK=8, LET=9, 
		IN=10, END=11, FUNCTION=12, VAR=13, TYPE=14, ARRAY=15, IF=16, THEN=17, 
		ELSE=18, DO=19, OF=20, NIL=21, PLUS=22, MINUS=23, DIV=24, MULT=25, LT=26, 
		GT=27, LE=28, GE=29, EQ=30, NE=31, AND=32, OR=33, ASGN=34, COMMA=35, COLON=36, 
		SC=37, LPAREN=38, RPAREN=39, LBRACKET=40, RBRACKET=41, LBRACE=42, RBRACE=43, 
		DOT=44, ID=45, INTLIT=46, STRLIT=47, WS=48;
	public const int
		RULE_program = 0, RULE_decs = 1, RULE_dec = 2, RULE_tydec = 3, RULE_ty = 4, 
		RULE_tyfields = 5, RULE_field = 6, RULE_typeid = 7, RULE_vardec = 8, RULE_fundec = 9, 
		RULE_lvalue = 10, RULE_exprs = 11, RULE_expr = 12;
	public static readonly string[] ruleNames = {
		"program", "decs", "dec", "tydec", "ty", "tyfields", "field", "typeid", 
		"vardec", "fundec", "lvalue", "exprs", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'import'", "'int'", "'string'", "'while'", "'for'", "'to'", 
		"'break'", "'let'", "'in'", "'end'", "'fn'", "'var'", "'type'", "'array'", 
		"'if'", "'then'", "'else'", "'do'", "'of'", "'nil'", "'+'", "'-'", "'/'", 
		"'*'", "'<'", "'>'", "'<='", "'>='", "'='", "'!='", "'&&'", "'||'", "':='", 
		"','", "':'", "';'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "IMPORT", "INT", "STRING", "WHILE", "FOR", "TO", "BREAK", 
		"LET", "IN", "END", "FUNCTION", "VAR", "TYPE", "ARRAY", "IF", "THEN", 
		"ELSE", "DO", "OF", "NIL", "PLUS", "MINUS", "DIV", "MULT", "LT", "GT", 
		"LE", "GE", "EQ", "NE", "AND", "OR", "ASGN", "COMMA", "COLON", "SC", "LPAREN", 
		"RPAREN", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", "DOT", "ID", "INTLIT", 
		"STRLIT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tiger.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TigerParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(TigerParser.Eof, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public DecsContext[] decs() {
			return GetRuleContexts<DecsContext>();
		}
		public DecsContext decs(int i) {
			return GetRuleContext<DecsContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 28;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case INT:
				case STRING:
				case WHILE:
				case FOR:
				case BREAK:
				case LET:
				case IF:
				case NIL:
				case MINUS:
				case LPAREN:
				case ID:
				case INTLIT:
				case STRLIT:
					{
					State = 26; expr(0);
					}
					break;
				case IMPORT:
				case FUNCTION:
				case VAR:
				case TYPE:
					{
					State = 27; decs();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 30;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IMPORT) | (1L << INT) | (1L << STRING) | (1L << WHILE) | (1L << FOR) | (1L << BREAK) | (1L << LET) | (1L << FUNCTION) | (1L << VAR) | (1L << TYPE) | (1L << IF) | (1L << NIL) | (1L << MINUS) | (1L << LPAREN) | (1L << ID) | (1L << INTLIT) | (1L << STRLIT))) != 0) );
			State = 32; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecsContext : ParserRuleContext {
		public DecContext[] dec() {
			return GetRuleContexts<DecContext>();
		}
		public DecContext dec(int i) {
			return GetRuleContext<DecContext>(i);
		}
		public DecsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decs; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterDecs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitDecs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecsContext decs() {
		DecsContext _localctx = new DecsContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_decs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 34; dec();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 37;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecContext : ParserRuleContext {
		public DecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dec; } }
	 
		public DecContext() { }
		public virtual void CopyFrom(DecContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DecFunDecContext : DecContext {
		public FundecContext fundec() {
			return GetRuleContext<FundecContext>(0);
		}
		public DecFunDecContext(DecContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterDecFunDec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitDecFunDec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecFunDec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecVarDecContext : DecContext {
		public VardecContext vardec() {
			return GetRuleContext<VardecContext>(0);
		}
		public DecVarDecContext(DecContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterDecVarDec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitDecVarDec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecVarDec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecImportContext : DecContext {
		public ITerminalNode IMPORT() { return GetToken(TigerParser.IMPORT, 0); }
		public ITerminalNode STRLIT() { return GetToken(TigerParser.STRLIT, 0); }
		public DecImportContext(DecContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterDecImport(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitDecImport(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecImport(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecTyDecContext : DecContext {
		public TydecContext tydec() {
			return GetRuleContext<TydecContext>(0);
		}
		public DecTyDecContext(DecContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterDecTyDec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitDecTyDec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecTyDec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecContext dec() {
		DecContext _localctx = new DecContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_dec);
		try {
			State = 44;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TYPE:
				_localctx = new DecTyDecContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 39; tydec();
				}
				break;
			case VAR:
				_localctx = new DecVarDecContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 40; vardec();
				}
				break;
			case FUNCTION:
				_localctx = new DecFunDecContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 41; fundec();
				}
				break;
			case IMPORT:
				_localctx = new DecImportContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 42; Match(IMPORT);
				State = 43; Match(STRLIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TydecContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(TigerParser.TYPE, 0); }
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public ITerminalNode EQ() { return GetToken(TigerParser.EQ, 0); }
		public TyContext ty() {
			return GetRuleContext<TyContext>(0);
		}
		public TydecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tydec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterTydec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitTydec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTydec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TydecContext tydec() {
		TydecContext _localctx = new TydecContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_tydec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(TYPE);
			State = 47; Match(ID);
			State = 48; Match(EQ);
			State = 49; ty();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TyContext : ParserRuleContext {
		public TyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ty; } }
	 
		public TyContext() { }
		public virtual void CopyFrom(TyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TyTypeIdContext : TyContext {
		public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		public TyTypeIdContext(TyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterTyTypeId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitTyTypeId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyTypeId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TyArrayContext : TyContext {
		public ITerminalNode ARRAY() { return GetToken(TigerParser.ARRAY, 0); }
		public ITerminalNode OF() { return GetToken(TigerParser.OF, 0); }
		public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		public TyArrayContext(TyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterTyArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitTyArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyArray(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TyBracedContext : TyContext {
		public ITerminalNode LBRACE() { return GetToken(TigerParser.LBRACE, 0); }
		public TyfieldsContext tyfields() {
			return GetRuleContext<TyfieldsContext>(0);
		}
		public ITerminalNode RBRACE() { return GetToken(TigerParser.RBRACE, 0); }
		public TyBracedContext(TyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterTyBraced(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitTyBraced(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyBraced(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TyContext ty() {
		TyContext _localctx = new TyContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_ty);
		try {
			State = 59;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT:
			case STRING:
			case ID:
				_localctx = new TyTypeIdContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 51; typeid();
				}
				break;
			case LBRACE:
				_localctx = new TyBracedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 52; Match(LBRACE);
				State = 53; tyfields();
				State = 54; Match(RBRACE);
				}
				break;
			case ARRAY:
				_localctx = new TyArrayContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 56; Match(ARRAY);
				State = 57; Match(OF);
				State = 58; typeid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TyfieldsContext : ParserRuleContext {
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TigerParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TigerParser.COMMA, i);
		}
		public TyfieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tyfields; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterTyfields(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitTyfields(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyfields(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TyfieldsContext tyfields() {
		TyfieldsContext _localctx = new TyfieldsContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_tyfields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ID) {
				{
				State = 61; field();
				State = 66;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 62; Match(COMMA);
					State = 63; field();
					}
					}
					State = 68;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public ITerminalNode COLON() { return GetToken(TigerParser.COLON, 0); }
		public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; Match(ID);
			State = 72; Match(COLON);
			State = 73; typeid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeidContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public ITerminalNode INT() { return GetToken(TigerParser.INT, 0); }
		public ITerminalNode STRING() { return GetToken(TigerParser.STRING, 0); }
		public TypeidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterTypeid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitTypeid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeidContext typeid() {
		TypeidContext _localctx = new TypeidContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_typeid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << STRING) | (1L << ID))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VardecContext : ParserRuleContext {
		public VardecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vardec; } }
	 
		public VardecContext() { }
		public virtual void CopyFrom(VardecContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleVarDecContext : VardecContext {
		public ITerminalNode VAR() { return GetToken(TigerParser.VAR, 0); }
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public ITerminalNode ASGN() { return GetToken(TigerParser.ASGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SimpleVarDecContext(VardecContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterSimpleVarDec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitSimpleVarDec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleVarDec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeVarDecContext : VardecContext {
		public ITerminalNode VAR() { return GetToken(TigerParser.VAR, 0); }
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public ITerminalNode COLON() { return GetToken(TigerParser.COLON, 0); }
		public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		public ITerminalNode ASGN() { return GetToken(TigerParser.ASGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TypeVarDecContext(VardecContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterTypeVarDec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitTypeVarDec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeVarDec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VardecContext vardec() {
		VardecContext _localctx = new VardecContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_vardec);
		try {
			State = 88;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				_localctx = new SimpleVarDecContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 77; Match(VAR);
				State = 78; Match(ID);
				State = 79; Match(ASGN);
				State = 80; expr(0);
				}
				break;

			case 2:
				_localctx = new TypeVarDecContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 81; Match(VAR);
				State = 82; Match(ID);
				State = 83; Match(COLON);
				State = 84; typeid();
				State = 85; Match(ASGN);
				State = 86; expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FundecContext : ParserRuleContext {
		public FundecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fundec; } }
	 
		public FundecContext() { }
		public virtual void CopyFrom(FundecContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleFuncDecContext : FundecContext {
		public ITerminalNode FUNCTION() { return GetToken(TigerParser.FUNCTION, 0); }
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(TigerParser.LPAREN, 0); }
		public TyfieldsContext tyfields() {
			return GetRuleContext<TyfieldsContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TigerParser.RPAREN, 0); }
		public ITerminalNode ASGN() { return GetToken(TigerParser.ASGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SimpleFuncDecContext(FundecContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterSimpleFuncDec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitSimpleFuncDec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleFuncDec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeFuncDecContext : FundecContext {
		public ITerminalNode FUNCTION() { return GetToken(TigerParser.FUNCTION, 0); }
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(TigerParser.LPAREN, 0); }
		public TyfieldsContext tyfields() {
			return GetRuleContext<TyfieldsContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TigerParser.RPAREN, 0); }
		public ITerminalNode COLON() { return GetToken(TigerParser.COLON, 0); }
		public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		public ITerminalNode ASGN() { return GetToken(TigerParser.ASGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TypeFuncDecContext(FundecContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterTypeFuncDec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitTypeFuncDec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeFuncDec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FundecContext fundec() {
		FundecContext _localctx = new FundecContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_fundec);
		try {
			State = 108;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				_localctx = new SimpleFuncDecContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 90; Match(FUNCTION);
				State = 91; Match(ID);
				State = 92; Match(LPAREN);
				State = 93; tyfields();
				State = 94; Match(RPAREN);
				State = 95; Match(ASGN);
				State = 96; expr(0);
				}
				break;

			case 2:
				_localctx = new TypeFuncDecContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 98; Match(FUNCTION);
				State = 99; Match(ID);
				State = 100; Match(LPAREN);
				State = 101; tyfields();
				State = 102; Match(RPAREN);
				State = 103; Match(COLON);
				State = 104; typeid();
				State = 105; Match(ASGN);
				State = 106; expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LvalueContext : ParserRuleContext {
		public LvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalue; } }
	 
		public LvalueContext() { }
		public virtual void CopyFrom(LvalueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LvalNestContext : LvalueContext {
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public ITerminalNode LBRACKET() { return GetToken(TigerParser.LBRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(TigerParser.RBRACKET, 0); }
		public LvalNestContext(LvalueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterLvalNest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitLvalNest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLvalNest(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LvalAttrContext : LvalueContext {
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(TigerParser.DOT, 0); }
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public LvalAttrContext(LvalueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterLvalAttr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitLvalAttr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLvalAttr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LvalIDContext : LvalueContext {
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public LvalIDContext(LvalueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterLvalID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitLvalID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLvalID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LvalueContext lvalue() {
		return lvalue(0);
	}

	private LvalueContext lvalue(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		LvalueContext _localctx = new LvalueContext(_ctx, _parentState);
		LvalueContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_lvalue, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new LvalIDContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 111; Match(ID);
			}
			_ctx.stop = _input.Lt(-1);
			State = 123;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 121;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
					case 1:
						{
						_localctx = new LvalAttrContext(new LvalueContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lvalue);
						State = 113;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 114; Match(DOT);
						State = 115; Match(ID);
						}
						break;

					case 2:
						{
						_localctx = new LvalNestContext(new LvalueContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lvalue);
						State = 116;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 117; Match(LBRACKET);
						State = 118; expr(0);
						State = 119; Match(RBRACKET);
						}
						break;
					}
					} 
				}
				State = 125;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] SC() { return GetTokens(TigerParser.SC); }
		public ITerminalNode SC(int i) {
			return GetToken(TigerParser.SC, i);
		}
		public ExprsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprs; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterExprs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitExprs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprsContext exprs() {
		ExprsContext _localctx = new ExprsContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_exprs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				State = 126; expr(0);
				State = 131;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 127; Match(SC);
						State = 128; expr(0);
						}
						} 
					}
					State = 133;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AndExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AND() { return GetToken(TigerParser.AND, 0); }
		public AndExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileExprContext : ExprContext {
		public ITerminalNode WHILE() { return GetToken(TigerParser.WHILE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode DO() { return GetToken(TigerParser.DO, 0); }
		public ExprsContext exprs() {
			return GetRuleContext<ExprsContext>(0);
		}
		public WhileExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterWhileExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitWhileExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExprContext : ExprContext {
		public ITerminalNode IF() { return GetToken(TigerParser.IF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(TigerParser.THEN, 0); }
		public ExprsContext[] exprs() {
			return GetRuleContexts<ExprsContext>();
		}
		public ExprsContext exprs(int i) {
			return GetRuleContext<ExprsContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(TigerParser.ELSE, 0); }
		public IfExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterIfExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitIfExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LtExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LT() { return GetToken(TigerParser.LT, 0); }
		public LtExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterLtExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitLtExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLtExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GtExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode GT() { return GetToken(TigerParser.GT, 0); }
		public GtExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterGtExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitGtExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGtExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GeExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode GE() { return GetToken(TigerParser.GE, 0); }
		public GeExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterGeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitGeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LeExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LE() { return GetToken(TigerParser.LE, 0); }
		public LeExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterLeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitLeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentContext : ExprContext {
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public ITerminalNode ASGN() { return GetToken(TigerParser.ASGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RecordCreationContext : ExprContext {
		public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		public ITerminalNode LBRACE() { return GetToken(TigerParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(TigerParser.RBRACE, 0); }
		public ITerminalNode[] ID() { return GetTokens(TigerParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TigerParser.ID, i);
		}
		public ITerminalNode[] ASGN() { return GetTokens(TigerParser.ASGN); }
		public ITerminalNode ASGN(int i) {
			return GetToken(TigerParser.ASGN, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TigerParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TigerParser.COMMA, i);
		}
		public RecordCreationContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterRecordCreation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitRecordCreation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordCreation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NeqExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode NE() { return GetToken(TigerParser.NE, 0); }
		public NeqExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterNeqExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitNeqExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeqExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallContext : ExprContext {
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(TigerParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(TigerParser.RPAREN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TigerParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TigerParser.COMMA, i);
		}
		public FunctionCallContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenNestExprContext : ExprContext {
		public ITerminalNode LPAREN() { return GetToken(TigerParser.LPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(TigerParser.RPAREN, 0); }
		public ParenNestExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterParenNestExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitParenNestExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenNestExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerLiteralContext : ExprContext {
		public ITerminalNode INTLIT() { return GetToken(TigerParser.INTLIT, 0); }
		public IntegerLiteralContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetExprContext : ExprContext {
		public ITerminalNode LET() { return GetToken(TigerParser.LET, 0); }
		public DecsContext decs() {
			return GetRuleContext<DecsContext>(0);
		}
		public ITerminalNode IN() { return GetToken(TigerParser.IN, 0); }
		public ExprsContext exprs() {
			return GetRuleContext<ExprsContext>(0);
		}
		public ITerminalNode END() { return GetToken(TigerParser.END, 0); }
		public LetExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterLetExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitLetExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(TigerParser.MULT, 0); }
		public MultExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterMultExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitMultExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(TigerParser.MINUS, 0); }
		public SubExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterSubExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitSubExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(TigerParser.PLUS, 0); }
		public AddExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OR() { return GetToken(TigerParser.OR, 0); }
		public OrExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NilContext : ExprContext {
		public ITerminalNode NIL() { return GetToken(TigerParser.NIL, 0); }
		public NilContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterNil(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitNil(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNil(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(TigerParser.DIV, 0); }
		public DivExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterDivExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitDivExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralContext : ExprContext {
		public ITerminalNode STRLIT() { return GetToken(TigerParser.STRLIT, 0); }
		public StringLiteralContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(TigerParser.EQ, 0); }
		public EqExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterEqExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitEqExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayCreationContext : ExprContext {
		public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		public ITerminalNode LBRACKET() { return GetToken(TigerParser.LBRACKET, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode RBRACKET() { return GetToken(TigerParser.RBRACKET, 0); }
		public ITerminalNode OF() { return GetToken(TigerParser.OF, 0); }
		public ArrayCreationContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterArrayCreation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitArrayCreation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForExprContext : ExprContext {
		public ITerminalNode FOR() { return GetToken(TigerParser.FOR, 0); }
		public ITerminalNode ID() { return GetToken(TigerParser.ID, 0); }
		public ITerminalNode ASGN() { return GetToken(TigerParser.ASGN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode TO() { return GetToken(TigerParser.TO, 0); }
		public ITerminalNode DO() { return GetToken(TigerParser.DO, 0); }
		public ExprsContext exprs() {
			return GetRuleContext<ExprsContext>(0);
		}
		public ForExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterForExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitForExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LeftValContext : ExprContext {
		public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		public LeftValContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterLeftVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitLeftVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegationExprContext : ExprContext {
		public ITerminalNode MINUS() { return GetToken(TigerParser.MINUS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegationExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterNegationExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitNegationExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegationExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakExprContext : ExprContext {
		public ITerminalNode BREAK() { return GetToken(TigerParser.BREAK, 0); }
		public BreakExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterBreakExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitBreakExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				_localctx = new LeftValContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 137; lvalue(0);
				}
				break;

			case 2:
				{
				_localctx = new NilContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 138; Match(NIL);
				}
				break;

			case 3:
				{
				_localctx = new IntegerLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 139; Match(INTLIT);
				}
				break;

			case 4:
				{
				_localctx = new StringLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 140; Match(STRLIT);
				}
				break;

			case 5:
				{
				_localctx = new FunctionCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 141; Match(ID);
				State = 142; Match(LPAREN);
				State = 151;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << STRING) | (1L << WHILE) | (1L << FOR) | (1L << BREAK) | (1L << LET) | (1L << IF) | (1L << NIL) | (1L << MINUS) | (1L << LPAREN) | (1L << ID) | (1L << INTLIT) | (1L << STRLIT))) != 0)) {
					{
					State = 143; expr(0);
					State = 148;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 144; Match(COMMA);
						State = 145; expr(0);
						}
						}
						State = 150;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 153; Match(RPAREN);
				}
				break;

			case 6:
				{
				_localctx = new RecordCreationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 154; typeid();
				State = 155; Match(LBRACE);
				State = 168;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 156; Match(ID);
					State = 157; Match(ASGN);
					State = 158; expr(0);
					State = 165;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 159; Match(COMMA);
						State = 160; Match(ID);
						State = 161; Match(ASGN);
						State = 162; expr(0);
						}
						}
						State = 167;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 170; Match(RBRACE);
				}
				break;

			case 7:
				{
				_localctx = new ArrayCreationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 172; typeid();
				State = 173; Match(LBRACKET);
				State = 174; expr(0);
				State = 175; Match(RBRACKET);
				State = 176; Match(OF);
				State = 177; expr(21);
				}
				break;

			case 8:
				{
				_localctx = new NegationExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 179; Match(MINUS);
				State = 180; expr(20);
				}
				break;

			case 9:
				{
				_localctx = new ParenNestExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 181; Match(LPAREN);
				State = 182; expr(0);
				State = 183; Match(RPAREN);
				}
				break;

			case 10:
				{
				_localctx = new AssignmentContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 185; lvalue(0);
				State = 186; Match(ASGN);
				State = 187; expr(6);
				}
				break;

			case 11:
				{
				_localctx = new IfExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 189; Match(IF);
				State = 190; expr(0);
				State = 191; Match(THEN);
				State = 192; exprs();
				State = 195;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
				case 1:
					{
					State = 193; Match(ELSE);
					State = 194; exprs();
					}
					break;
				}
				}
				break;

			case 12:
				{
				_localctx = new WhileExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 197; Match(WHILE);
				State = 198; expr(0);
				State = 199; Match(DO);
				State = 200; exprs();
				}
				break;

			case 13:
				{
				_localctx = new ForExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 202; Match(FOR);
				State = 203; Match(ID);
				State = 204; Match(ASGN);
				State = 205; expr(0);
				State = 206; Match(TO);
				State = 207; expr(0);
				State = 208; Match(DO);
				State = 209; exprs();
				}
				break;

			case 14:
				{
				_localctx = new BreakExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 211; Match(BREAK);
				}
				break;

			case 15:
				{
				_localctx = new LetExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 212; Match(LET);
				State = 213; decs();
				State = 214; Match(IN);
				State = 215; exprs();
				State = 216; Match(END);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 258;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 256;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
					case 1:
						{
						_localctx = new MultExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 220;
						if (!(Precpred(_ctx, 19))) throw new FailedPredicateException(this, "Precpred(_ctx, 19)");
						State = 221; Match(MULT);
						State = 222; expr(20);
						}
						break;

					case 2:
						{
						_localctx = new DivExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 223;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 224; Match(DIV);
						State = 225; expr(19);
						}
						break;

					case 3:
						{
						_localctx = new AddExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 226;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 227; Match(PLUS);
						State = 228; expr(18);
						}
						break;

					case 4:
						{
						_localctx = new SubExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 229;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 230; Match(MINUS);
						State = 231; expr(17);
						}
						break;

					case 5:
						{
						_localctx = new NeqExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 232;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 233; Match(NE);
						State = 234; expr(16);
						}
						break;

					case 6:
						{
						_localctx = new LtExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 235;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 236; Match(LT);
						State = 237; expr(15);
						}
						break;

					case 7:
						{
						_localctx = new GtExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 238;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 239; Match(GT);
						State = 240; expr(14);
						}
						break;

					case 8:
						{
						_localctx = new LeExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 241;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 242; Match(LE);
						State = 243; expr(13);
						}
						break;

					case 9:
						{
						_localctx = new GeExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 244;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 245; Match(GE);
						State = 246; expr(12);
						}
						break;

					case 10:
						{
						_localctx = new EqExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 247;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 248; Match(EQ);
						State = 249; expr(11);
						}
						break;

					case 11:
						{
						_localctx = new AndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 250;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 251; Match(AND);
						State = 252; expr(10);
						}
						break;

					case 12:
						{
						_localctx = new OrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 253;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 254; Match(OR);
						State = 255; expr(9);
						}
						break;
					}
					} 
				}
				State = 260;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return lvalue_sempred((LvalueContext)_localctx, predIndex);

		case 12: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool lvalue_sempred(LvalueContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);

		case 1: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 19);

		case 3: return Precpred(_ctx, 18);

		case 4: return Precpred(_ctx, 17);

		case 5: return Precpred(_ctx, 16);

		case 6: return Precpred(_ctx, 15);

		case 7: return Precpred(_ctx, 14);

		case 8: return Precpred(_ctx, 13);

		case 9: return Precpred(_ctx, 12);

		case 10: return Precpred(_ctx, 11);

		case 11: return Precpred(_ctx, 10);

		case 12: return Precpred(_ctx, 9);

		case 13: return Precpred(_ctx, 8);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x32\x108\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x3\x2\x3\x2\x6\x2"+
		"\x1F\n\x2\r\x2\xE\x2 \x3\x2\x3\x2\x3\x3\x6\x3&\n\x3\r\x3\xE\x3\'\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4/\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6>\n\x6\x3\a\x3\a\x3"+
		"\a\a\a\x43\n\a\f\a\xE\a\x46\v\a\x5\aH\n\a\x3\b\x3\b\x3\b\x3\b\x3\t\x3"+
		"\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n[\n\n\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x5\vo\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\a\f|\n\f\f\f\xE\f\x7F\v\f\x3\r\x3\r\x3\r\a\r\x84\n\r\f\r"+
		"\xE\r\x87\v\r\x5\r\x89\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\a\xE\x95\n\xE\f\xE\xE\xE\x98\v\xE\x5\xE\x9A\n\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\xA6\n\xE\f"+
		"\xE\xE\xE\xA9\v\xE\x5\xE\xAB\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\xC6\n\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\xDD\n\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\a\xE\x103\n\xE\f\xE\xE\xE\x106\v\xE\x3\xE\x2\x2\x4\x16\x1A\xF\x2\x2"+
		"\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x2\x3\x4\x2\x5\x6//\x129\x2\x1E\x3\x2\x2\x2\x4%\x3\x2\x2\x2\x6.\x3"+
		"\x2\x2\x2\b\x30\x3\x2\x2\x2\n=\x3\x2\x2\x2\fG\x3\x2\x2\x2\xEI\x3\x2\x2"+
		"\x2\x10M\x3\x2\x2\x2\x12Z\x3\x2\x2\x2\x14n\x3\x2\x2\x2\x16p\x3\x2\x2\x2"+
		"\x18\x88\x3\x2\x2\x2\x1A\xDC\x3\x2\x2\x2\x1C\x1F\x5\x1A\xE\x2\x1D\x1F"+
		"\x5\x4\x3\x2\x1E\x1C\x3\x2\x2\x2\x1E\x1D\x3\x2\x2\x2\x1F \x3\x2\x2\x2"+
		" \x1E\x3\x2\x2\x2 !\x3\x2\x2\x2!\"\x3\x2\x2\x2\"#\a\x2\x2\x3#\x3\x3\x2"+
		"\x2\x2$&\x5\x6\x4\x2%$\x3\x2\x2\x2&\'\x3\x2\x2\x2\'%\x3\x2\x2\x2\'(\x3"+
		"\x2\x2\x2(\x5\x3\x2\x2\x2)/\x5\b\x5\x2*/\x5\x12\n\x2+/\x5\x14\v\x2,-\a"+
		"\x4\x2\x2-/\a\x31\x2\x2.)\x3\x2\x2\x2.*\x3\x2\x2\x2.+\x3\x2\x2\x2.,\x3"+
		"\x2\x2\x2/\a\x3\x2\x2\x2\x30\x31\a\x10\x2\x2\x31\x32\a/\x2\x2\x32\x33"+
		"\a \x2\x2\x33\x34\x5\n\x6\x2\x34\t\x3\x2\x2\x2\x35>\x5\x10\t\x2\x36\x37"+
		"\a,\x2\x2\x37\x38\x5\f\a\x2\x38\x39\a-\x2\x2\x39>\x3\x2\x2\x2:;\a\x11"+
		"\x2\x2;<\a\x16\x2\x2<>\x5\x10\t\x2=\x35\x3\x2\x2\x2=\x36\x3\x2\x2\x2="+
		":\x3\x2\x2\x2>\v\x3\x2\x2\x2?\x44\x5\xE\b\x2@\x41\a%\x2\x2\x41\x43\x5"+
		"\xE\b\x2\x42@\x3\x2\x2\x2\x43\x46\x3\x2\x2\x2\x44\x42\x3\x2\x2\x2\x44"+
		"\x45\x3\x2\x2\x2\x45H\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2G?\x3\x2\x2\x2GH"+
		"\x3\x2\x2\x2H\r\x3\x2\x2\x2IJ\a/\x2\x2JK\a&\x2\x2KL\x5\x10\t\x2L\xF\x3"+
		"\x2\x2\x2MN\t\x2\x2\x2N\x11\x3\x2\x2\x2OP\a\xF\x2\x2PQ\a/\x2\x2QR\a$\x2"+
		"\x2R[\x5\x1A\xE\x2ST\a\xF\x2\x2TU\a/\x2\x2UV\a&\x2\x2VW\x5\x10\t\x2WX"+
		"\a$\x2\x2XY\x5\x1A\xE\x2Y[\x3\x2\x2\x2ZO\x3\x2\x2\x2ZS\x3\x2\x2\x2[\x13"+
		"\x3\x2\x2\x2\\]\a\xE\x2\x2]^\a/\x2\x2^_\a(\x2\x2_`\x5\f\a\x2`\x61\a)\x2"+
		"\x2\x61\x62\a$\x2\x2\x62\x63\x5\x1A\xE\x2\x63o\x3\x2\x2\x2\x64\x65\a\xE"+
		"\x2\x2\x65\x66\a/\x2\x2\x66g\a(\x2\x2gh\x5\f\a\x2hi\a)\x2\x2ij\a&\x2\x2"+
		"jk\x5\x10\t\x2kl\a$\x2\x2lm\x5\x1A\xE\x2mo\x3\x2\x2\x2n\\\x3\x2\x2\x2"+
		"n\x64\x3\x2\x2\x2o\x15\x3\x2\x2\x2pq\b\f\x1\x2qr\a/\x2\x2r}\x3\x2\x2\x2"+
		"st\f\x4\x2\x2tu\a.\x2\x2u|\a/\x2\x2vw\f\x3\x2\x2wx\a*\x2\x2xy\x5\x1A\xE"+
		"\x2yz\a+\x2\x2z|\x3\x2\x2\x2{s\x3\x2\x2\x2{v\x3\x2\x2\x2|\x7F\x3\x2\x2"+
		"\x2}{\x3\x2\x2\x2}~\x3\x2\x2\x2~\x17\x3\x2\x2\x2\x7F}\x3\x2\x2\x2\x80"+
		"\x85\x5\x1A\xE\x2\x81\x82\a\'\x2\x2\x82\x84\x5\x1A\xE\x2\x83\x81\x3\x2"+
		"\x2\x2\x84\x87\x3\x2\x2\x2\x85\x83\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86"+
		"\x89\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x88\x80\x3\x2\x2\x2\x88\x89\x3\x2"+
		"\x2\x2\x89\x19\x3\x2\x2\x2\x8A\x8B\b\xE\x1\x2\x8B\xDD\x5\x16\f\x2\x8C"+
		"\xDD\a\x17\x2\x2\x8D\xDD\a\x30\x2\x2\x8E\xDD\a\x31\x2\x2\x8F\x90\a/\x2"+
		"\x2\x90\x99\a(\x2\x2\x91\x96\x5\x1A\xE\x2\x92\x93\a%\x2\x2\x93\x95\x5"+
		"\x1A\xE\x2\x94\x92\x3\x2\x2\x2\x95\x98\x3\x2\x2\x2\x96\x94\x3\x2\x2\x2"+
		"\x96\x97\x3\x2\x2\x2\x97\x9A\x3\x2\x2\x2\x98\x96\x3\x2\x2\x2\x99\x91\x3"+
		"\x2\x2\x2\x99\x9A\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B\xDD\a)\x2\x2\x9C"+
		"\x9D\x5\x10\t\x2\x9D\xAA\a,\x2\x2\x9E\x9F\a/\x2\x2\x9F\xA0\a$\x2\x2\xA0"+
		"\xA7\x5\x1A\xE\x2\xA1\xA2\a%\x2\x2\xA2\xA3\a/\x2\x2\xA3\xA4\a$\x2\x2\xA4"+
		"\xA6\x5\x1A\xE\x2\xA5\xA1\x3\x2\x2\x2\xA6\xA9\x3\x2\x2\x2\xA7\xA5\x3\x2"+
		"\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xAB\x3\x2\x2\x2\xA9\xA7\x3\x2\x2\x2\xAA"+
		"\x9E\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC\xAD\a-\x2"+
		"\x2\xAD\xDD\x3\x2\x2\x2\xAE\xAF\x5\x10\t\x2\xAF\xB0\a*\x2\x2\xB0\xB1\x5"+
		"\x1A\xE\x2\xB1\xB2\a+\x2\x2\xB2\xB3\a\x16\x2\x2\xB3\xB4\x5\x1A\xE\x17"+
		"\xB4\xDD\x3\x2\x2\x2\xB5\xB6\a\x19\x2\x2\xB6\xDD\x5\x1A\xE\x16\xB7\xB8"+
		"\a(\x2\x2\xB8\xB9\x5\x1A\xE\x2\xB9\xBA\a)\x2\x2\xBA\xDD\x3\x2\x2\x2\xBB"+
		"\xBC\x5\x16\f\x2\xBC\xBD\a$\x2\x2\xBD\xBE\x5\x1A\xE\b\xBE\xDD\x3\x2\x2"+
		"\x2\xBF\xC0\a\x12\x2\x2\xC0\xC1\x5\x1A\xE\x2\xC1\xC2\a\x13\x2\x2\xC2\xC5"+
		"\x5\x18\r\x2\xC3\xC4\a\x14\x2\x2\xC4\xC6\x5\x18\r\x2\xC5\xC3\x3\x2\x2"+
		"\x2\xC5\xC6\x3\x2\x2\x2\xC6\xDD\x3\x2\x2\x2\xC7\xC8\a\a\x2\x2\xC8\xC9"+
		"\x5\x1A\xE\x2\xC9\xCA\a\x15\x2\x2\xCA\xCB\x5\x18\r\x2\xCB\xDD\x3\x2\x2"+
		"\x2\xCC\xCD\a\b\x2\x2\xCD\xCE\a/\x2\x2\xCE\xCF\a$\x2\x2\xCF\xD0\x5\x1A"+
		"\xE\x2\xD0\xD1\a\t\x2\x2\xD1\xD2\x5\x1A\xE\x2\xD2\xD3\a\x15\x2\x2\xD3"+
		"\xD4\x5\x18\r\x2\xD4\xDD\x3\x2\x2\x2\xD5\xDD\a\n\x2\x2\xD6\xD7\a\v\x2"+
		"\x2\xD7\xD8\x5\x4\x3\x2\xD8\xD9\a\f\x2\x2\xD9\xDA\x5\x18\r\x2\xDA\xDB"+
		"\a\r\x2\x2\xDB\xDD\x3\x2\x2\x2\xDC\x8A\x3\x2\x2\x2\xDC\x8C\x3\x2\x2\x2"+
		"\xDC\x8D\x3\x2\x2\x2\xDC\x8E\x3\x2\x2\x2\xDC\x8F\x3\x2\x2\x2\xDC\x9C\x3"+
		"\x2\x2\x2\xDC\xAE\x3\x2\x2\x2\xDC\xB5\x3\x2\x2\x2\xDC\xB7\x3\x2\x2\x2"+
		"\xDC\xBB\x3\x2\x2\x2\xDC\xBF\x3\x2\x2\x2\xDC\xC7\x3\x2\x2\x2\xDC\xCC\x3"+
		"\x2\x2\x2\xDC\xD5\x3\x2\x2\x2\xDC\xD6\x3\x2\x2\x2\xDD\x104\x3\x2\x2\x2"+
		"\xDE\xDF\f\x15\x2\x2\xDF\xE0\a\x1B\x2\x2\xE0\x103\x5\x1A\xE\x16\xE1\xE2"+
		"\f\x14\x2\x2\xE2\xE3\a\x1A\x2\x2\xE3\x103\x5\x1A\xE\x15\xE4\xE5\f\x13"+
		"\x2\x2\xE5\xE6\a\x18\x2\x2\xE6\x103\x5\x1A\xE\x14\xE7\xE8\f\x12\x2\x2"+
		"\xE8\xE9\a\x19\x2\x2\xE9\x103\x5\x1A\xE\x13\xEA\xEB\f\x11\x2\x2\xEB\xEC"+
		"\a!\x2\x2\xEC\x103\x5\x1A\xE\x12\xED\xEE\f\x10\x2\x2\xEE\xEF\a\x1C\x2"+
		"\x2\xEF\x103\x5\x1A\xE\x11\xF0\xF1\f\xF\x2\x2\xF1\xF2\a\x1D\x2\x2\xF2"+
		"\x103\x5\x1A\xE\x10\xF3\xF4\f\xE\x2\x2\xF4\xF5\a\x1E\x2\x2\xF5\x103\x5"+
		"\x1A\xE\xF\xF6\xF7\f\r\x2\x2\xF7\xF8\a\x1F\x2\x2\xF8\x103\x5\x1A\xE\xE"+
		"\xF9\xFA\f\f\x2\x2\xFA\xFB\a \x2\x2\xFB\x103\x5\x1A\xE\r\xFC\xFD\f\v\x2"+
		"\x2\xFD\xFE\a\"\x2\x2\xFE\x103\x5\x1A\xE\f\xFF\x100\f\n\x2\x2\x100\x101"+
		"\a#\x2\x2\x101\x103\x5\x1A\xE\v\x102\xDE\x3\x2\x2\x2\x102\xE1\x3\x2\x2"+
		"\x2\x102\xE4\x3\x2\x2\x2\x102\xE7\x3\x2\x2\x2\x102\xEA\x3\x2\x2\x2\x102"+
		"\xED\x3\x2\x2\x2\x102\xF0\x3\x2\x2\x2\x102\xF3\x3\x2\x2\x2\x102\xF6\x3"+
		"\x2\x2\x2\x102\xF9\x3\x2\x2\x2\x102\xFC\x3\x2\x2\x2\x102\xFF\x3\x2\x2"+
		"\x2\x103\x106\x3\x2\x2\x2\x104\x102\x3\x2\x2\x2\x104\x105\x3\x2\x2\x2"+
		"\x105\x1B\x3\x2\x2\x2\x106\x104\x3\x2\x2\x2\x17\x1E \'.=\x44GZn{}\x85"+
		"\x88\x96\x99\xA7\xAA\xC5\xDC\x102\x104";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Tiger.ANTLR
