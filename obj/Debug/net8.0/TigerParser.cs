//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\jackt\OneDrive\Documents\Compilers\Tiger\Tiger\ANTLR\Tiger.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Tiger.ANTLR {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class TigerParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, COMMENT=7, INT=8, STRING=9, 
		WHILE=10, FOR=11, BREAK=12, ARRAY=13, IN=14, FUNCTION=15, IF=16, ELSE=17, 
		DO=18, NIL=19, PLUS=20, MINUS=21, DIV=22, MULT=23, LT=24, GT=25, LE=26, 
		GE=27, EQ=28, AND=29, OR=30, ASGN=31, IDENTIFIER=32, INTLIT=33, STRLIT=34, 
		WS=35;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_statement = 2, RULE_ifStmt = 3, 
		RULE_elseIfStmt = 4, RULE_block = 5, RULE_whileStmt = 6, RULE_assignment = 7, 
		RULE_type = 8, RULE_functionCall = 9, RULE_expression = 10, RULE_mathOp = 11, 
		RULE_boolOp = 12, RULE_constant = 13;
	public static readonly string[] ruleNames = {
		"program", "line", "statement", "ifStmt", "elseIfStmt", "block", "whileStmt", 
		"assignment", "type", "functionCall", "expression", "mathOp", "boolOp", 
		"constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'('", "')'", "'{'", "'}'", "','", null, "'int'", "'string'", 
		"'while'", "'for'", "'break'", "'array'", "'in'", "'fn'", "'if'", "'else'", 
		"'do'", "'nil'", "'+'", "'-'", "'/'", "'*'", "'<'", "'>'", "'<='", "'>='", 
		"'='", "'&&'", "'||'", "':='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "COMMENT", "INT", "STRING", 
		"WHILE", "FOR", "BREAK", "ARRAY", "IN", "FUNCTION", "IF", "ELSE", "DO", 
		"NIL", "PLUS", "MINUS", "DIV", "MULT", "LT", "GT", "LE", "GE", "EQ", "AND", 
		"OR", "ASGN", "IDENTIFIER", "INTLIT", "STRLIT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tiger.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TigerParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(TigerParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << STRING) | (1L << WHILE) | (1L << IF) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 28; line();
				}
				}
				State = 33;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 34; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public WhileStmtContext whileStmt() {
			return GetRuleContext<WhileStmtContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 39;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT:
			case STRING:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36; statement();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; ifStmt();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 38; whileStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT:
			case STRING:
				{
				State = 41; assignment();
				}
				break;
			case IDENTIFIER:
				{
				State = 42; functionCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 45; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfStmtContext elseIfStmt() {
			return GetRuleContext<ElseIfStmtContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_ifStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; Match(IF);
			State = 48; Match(T__1);
			State = 49; expression(0);
			State = 50; Match(T__2);
			State = 51; block();
			State = 54;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 52; Match(ELSE);
				State = 53; elseIfStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStmtContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public ElseIfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterElseIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitElseIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStmtContext elseIfStmt() {
		ElseIfStmtContext _localctx = new ElseIfStmtContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_elseIfStmt);
		try {
			State = 58;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56; block();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57; ifStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(T__3);
			State = 64;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << STRING) | (1L << WHILE) | (1L << IF) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 61; line();
				}
				}
				State = 66;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 67; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStmtContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(TigerParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStmtContext whileStmt() {
		WhileStmtContext _localctx = new WhileStmtContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_whileStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(WHILE);
			State = 70; Match(T__1);
			State = 71; expression(0);
			State = 72; Match(T__2);
			State = 73; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(TigerParser.IDENTIFIER, 0); }
		public ITerminalNode ASGN() { return GetToken(TigerParser.ASGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; type();
			State = 76; Match(IDENTIFIER);
			State = 77; Match(ASGN);
			State = 78; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(TigerParser.INT, 0); }
		public ITerminalNode STRING() { return GetToken(TigerParser.STRING, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			_la = _input.La(1);
			if ( !(_la==INT || _la==STRING) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TigerParser.IDENTIFIER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(IDENTIFIER);
			State = 83; Match(T__1);
			State = 92;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << IDENTIFIER) | (1L << INTLIT) | (1L << STRLIT))) != 0)) {
				{
				State = 84; expression(0);
				State = 89;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__5) {
					{
					{
					State = 85; Match(T__5);
					State = 86; expression(0);
					}
					}
					State = 91;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 94; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(TigerParser.IDENTIFIER, 0); }
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MathOpContext mathOp() {
			return GetRuleContext<MathOpContext>(0);
		}
		public BoolOpContext boolOp() {
			return GetRuleContext<BoolOpContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 97; constant();
				}
				break;

			case 2:
				{
				State = 98; Match(IDENTIFIER);
				}
				break;

			case 3:
				{
				State = 99; functionCall();
				}
				break;

			case 4:
				{
				State = 100; Match(T__1);
				State = 101; expression(0);
				State = 102; Match(T__2);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 116;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 114;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 106;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 107; mathOp();
						State = 108; expression(3);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 110;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 111; boolOp();
						State = 112; expression(2);
						}
						break;
					}
					} 
				}
				State = 118;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MathOpContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(TigerParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(TigerParser.MINUS, 0); }
		public ITerminalNode DIV() { return GetToken(TigerParser.DIV, 0); }
		public ITerminalNode MULT() { return GetToken(TigerParser.MULT, 0); }
		public MathOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterMathOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitMathOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathOpContext mathOp() {
		MathOpContext _localctx = new MathOpContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_mathOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << DIV) | (1L << MULT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOpContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(TigerParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(TigerParser.GT, 0); }
		public ITerminalNode LE() { return GetToken(TigerParser.LE, 0); }
		public ITerminalNode GE() { return GetToken(TigerParser.GE, 0); }
		public ITerminalNode EQ() { return GetToken(TigerParser.EQ, 0); }
		public ITerminalNode AND() { return GetToken(TigerParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(TigerParser.OR, 0); }
		public BoolOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterBoolOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitBoolOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolOpContext boolOp() {
		BoolOpContext _localctx = new BoolOpContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_boolOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << GT) | (1L << LE) | (1L << GE) | (1L << EQ) | (1L << AND) | (1L << OR))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode INTLIT() { return GetToken(TigerParser.INTLIT, 0); }
		public ITerminalNode STRLIT() { return GetToken(TigerParser.STRLIT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITigerListener typedListener = listener as ITigerListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITigerVisitor<TResult> typedVisitor = visitor as ITigerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			_la = _input.La(1);
			if ( !(_la==INTLIT || _la==STRLIT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);

		case 1: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3%\x80\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x3\x2\a\x2"+
		" \n\x2\f\x2\xE\x2#\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x5\x3*\n\x3\x3\x4"+
		"\x3\x4\x5\x4.\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x5\x5\x39\n\x5\x3\x6\x3\x6\x5\x6=\n\x6\x3\a\x3\a\a\a\x41\n\a\f\a\xE"+
		"\a\x44\v\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\a\vZ\n\v\f\v\xE\v]\v\v\x5\v_"+
		"\n\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\fk\n\f\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\a\fu\n\f\f\f\xE\fx\v\f\x3\r\x3\r\x3"+
		"\xE\x3\xE\x3\xF\x3\xF\x3\xF\x2\x2\x3\x16\x10\x2\x2\x4\x2\x6\x2\b\x2\n"+
		"\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x2\x6"+
		"\x3\x2\n\v\x3\x2\x16\x19\x3\x2\x1A \x3\x2#$\x7F\x2!\x3\x2\x2\x2\x4)\x3"+
		"\x2\x2\x2\x6-\x3\x2\x2\x2\b\x31\x3\x2\x2\x2\n<\x3\x2\x2\x2\f>\x3\x2\x2"+
		"\x2\xEG\x3\x2\x2\x2\x10M\x3\x2\x2\x2\x12R\x3\x2\x2\x2\x14T\x3\x2\x2\x2"+
		"\x16j\x3\x2\x2\x2\x18y\x3\x2\x2\x2\x1A{\x3\x2\x2\x2\x1C}\x3\x2\x2\x2\x1E"+
		" \x5\x4\x3\x2\x1F\x1E\x3\x2\x2\x2 #\x3\x2\x2\x2!\x1F\x3\x2\x2\x2!\"\x3"+
		"\x2\x2\x2\"$\x3\x2\x2\x2#!\x3\x2\x2\x2$%\a\x2\x2\x3%\x3\x3\x2\x2\x2&*"+
		"\x5\x6\x4\x2\'*\x5\b\x5\x2(*\x5\xE\b\x2)&\x3\x2\x2\x2)\'\x3\x2\x2\x2)"+
		"(\x3\x2\x2\x2*\x5\x3\x2\x2\x2+.\x5\x10\t\x2,.\x5\x14\v\x2-+\x3\x2\x2\x2"+
		"-,\x3\x2\x2\x2./\x3\x2\x2\x2/\x30\a\x3\x2\x2\x30\a\x3\x2\x2\x2\x31\x32"+
		"\a\x12\x2\x2\x32\x33\a\x4\x2\x2\x33\x34\x5\x16\f\x2\x34\x35\a\x5\x2\x2"+
		"\x35\x38\x5\f\a\x2\x36\x37\a\x13\x2\x2\x37\x39\x5\n\x6\x2\x38\x36\x3\x2"+
		"\x2\x2\x38\x39\x3\x2\x2\x2\x39\t\x3\x2\x2\x2:=\x5\f\a\x2;=\x5\b\x5\x2"+
		"<:\x3\x2\x2\x2<;\x3\x2\x2\x2=\v\x3\x2\x2\x2>\x42\a\x6\x2\x2?\x41\x5\x4"+
		"\x3\x2@?\x3\x2\x2\x2\x41\x44\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x42\x43\x3\x2"+
		"\x2\x2\x43\x45\x3\x2\x2\x2\x44\x42\x3\x2\x2\x2\x45\x46\a\a\x2\x2\x46\r"+
		"\x3\x2\x2\x2GH\a\f\x2\x2HI\a\x4\x2\x2IJ\x5\x16\f\x2JK\a\x5\x2\x2KL\x5"+
		"\f\a\x2L\xF\x3\x2\x2\x2MN\x5\x12\n\x2NO\a\"\x2\x2OP\a!\x2\x2PQ\x5\x16"+
		"\f\x2Q\x11\x3\x2\x2\x2RS\t\x2\x2\x2S\x13\x3\x2\x2\x2TU\a\"\x2\x2U^\a\x4"+
		"\x2\x2V[\x5\x16\f\x2WX\a\b\x2\x2XZ\x5\x16\f\x2YW\x3\x2\x2\x2Z]\x3\x2\x2"+
		"\x2[Y\x3\x2\x2\x2[\\\x3\x2\x2\x2\\_\x3\x2\x2\x2][\x3\x2\x2\x2^V\x3\x2"+
		"\x2\x2^_\x3\x2\x2\x2_`\x3\x2\x2\x2`\x61\a\x5\x2\x2\x61\x15\x3\x2\x2\x2"+
		"\x62\x63\b\f\x1\x2\x63k\x5\x1C\xF\x2\x64k\a\"\x2\x2\x65k\x5\x14\v\x2\x66"+
		"g\a\x4\x2\x2gh\x5\x16\f\x2hi\a\x5\x2\x2ik\x3\x2\x2\x2j\x62\x3\x2\x2\x2"+
		"j\x64\x3\x2\x2\x2j\x65\x3\x2\x2\x2j\x66\x3\x2\x2\x2kv\x3\x2\x2\x2lm\f"+
		"\x4\x2\x2mn\x5\x18\r\x2no\x5\x16\f\x5ou\x3\x2\x2\x2pq\f\x3\x2\x2qr\x5"+
		"\x1A\xE\x2rs\x5\x16\f\x4su\x3\x2\x2\x2tl\x3\x2\x2\x2tp\x3\x2\x2\x2ux\x3"+
		"\x2\x2\x2vt\x3\x2\x2\x2vw\x3\x2\x2\x2w\x17\x3\x2\x2\x2xv\x3\x2\x2\x2y"+
		"z\t\x3\x2\x2z\x19\x3\x2\x2\x2{|\t\x4\x2\x2|\x1B\x3\x2\x2\x2}~\t\x5\x2"+
		"\x2~\x1D\x3\x2\x2\x2\r!)-\x38<\x42[^jtv";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Tiger.ANTLR
