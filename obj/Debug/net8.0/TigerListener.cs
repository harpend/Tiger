//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\jackt\OneDrive\Documents\Compilers\Tiger\Tiger\ANTLR\Tiger.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Tiger.ANTLR {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="TigerParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface ITigerListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] TigerParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] TigerParser.ProgramContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.line"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLine([NotNull] TigerParser.LineContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.line"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLine([NotNull] TigerParser.LineContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] TigerParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] TigerParser.StatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.ifStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStmt([NotNull] TigerParser.IfStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.ifStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStmt([NotNull] TigerParser.IfStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.elseIfStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseIfStmt([NotNull] TigerParser.ElseIfStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.elseIfStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseIfStmt([NotNull] TigerParser.ElseIfStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] TigerParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] TigerParser.BlockContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.whileStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStmt([NotNull] TigerParser.WhileStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.whileStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStmt([NotNull] TigerParser.WhileStmtContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] TigerParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] TigerParser.AssignmentContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] TigerParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] TigerParser.TypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] TigerParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] TigerParser.FunctionCallContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] TigerParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] TigerParser.ExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.mathOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMathOp([NotNull] TigerParser.MathOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.mathOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMathOp([NotNull] TigerParser.MathOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.boolOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolOp([NotNull] TigerParser.BoolOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.boolOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolOp([NotNull] TigerParser.BoolOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstant([NotNull] TigerParser.ConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstant([NotNull] TigerParser.ConstantContext context);
}
} // namespace Tiger.ANTLR
