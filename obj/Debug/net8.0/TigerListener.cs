//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\jackt\OneDrive\Documents\Compilers\Tiger\Tiger\ANTLR\Tiger.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Tiger.ANTLR {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="TigerParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface ITigerListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>DecFunDec</c>
	/// labeled alternative in <see cref="TigerParser.dec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecFunDec([NotNull] TigerParser.DecFunDecContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DecFunDec</c>
	/// labeled alternative in <see cref="TigerParser.dec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecFunDec([NotNull] TigerParser.DecFunDecContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>DecVarDec</c>
	/// labeled alternative in <see cref="TigerParser.dec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecVarDec([NotNull] TigerParser.DecVarDecContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DecVarDec</c>
	/// labeled alternative in <see cref="TigerParser.dec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecVarDec([NotNull] TigerParser.DecVarDecContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>DecImport</c>
	/// labeled alternative in <see cref="TigerParser.dec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecImport([NotNull] TigerParser.DecImportContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DecImport</c>
	/// labeled alternative in <see cref="TigerParser.dec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecImport([NotNull] TigerParser.DecImportContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>DecTyDec</c>
	/// labeled alternative in <see cref="TigerParser.dec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecTyDec([NotNull] TigerParser.DecTyDecContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DecTyDec</c>
	/// labeled alternative in <see cref="TigerParser.dec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecTyDec([NotNull] TigerParser.DecTyDecContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>TyTypeId</c>
	/// labeled alternative in <see cref="TigerParser.ty"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTyTypeId([NotNull] TigerParser.TyTypeIdContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TyTypeId</c>
	/// labeled alternative in <see cref="TigerParser.ty"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTyTypeId([NotNull] TigerParser.TyTypeIdContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>TyArray</c>
	/// labeled alternative in <see cref="TigerParser.ty"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTyArray([NotNull] TigerParser.TyArrayContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TyArray</c>
	/// labeled alternative in <see cref="TigerParser.ty"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTyArray([NotNull] TigerParser.TyArrayContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>TyBraced</c>
	/// labeled alternative in <see cref="TigerParser.ty"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTyBraced([NotNull] TigerParser.TyBracedContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TyBraced</c>
	/// labeled alternative in <see cref="TigerParser.ty"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTyBraced([NotNull] TigerParser.TyBracedContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>SimpleFuncDec</c>
	/// labeled alternative in <see cref="TigerParser.fundec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleFuncDec([NotNull] TigerParser.SimpleFuncDecContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SimpleFuncDec</c>
	/// labeled alternative in <see cref="TigerParser.fundec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleFuncDec([NotNull] TigerParser.SimpleFuncDecContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>TypeFuncDec</c>
	/// labeled alternative in <see cref="TigerParser.fundec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeFuncDec([NotNull] TigerParser.TypeFuncDecContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeFuncDec</c>
	/// labeled alternative in <see cref="TigerParser.fundec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeFuncDec([NotNull] TigerParser.TypeFuncDecContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>SimpleVarDec</c>
	/// labeled alternative in <see cref="TigerParser.vardec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleVarDec([NotNull] TigerParser.SimpleVarDecContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SimpleVarDec</c>
	/// labeled alternative in <see cref="TigerParser.vardec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleVarDec([NotNull] TigerParser.SimpleVarDecContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>TypeVarDec</c>
	/// labeled alternative in <see cref="TigerParser.vardec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeVarDec([NotNull] TigerParser.TypeVarDecContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeVarDec</c>
	/// labeled alternative in <see cref="TigerParser.vardec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeVarDec([NotNull] TigerParser.TypeVarDecContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>AndExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndExpr([NotNull] TigerParser.AndExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AndExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndExpr([NotNull] TigerParser.AndExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>WhileExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileExpr([NotNull] TigerParser.WhileExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WhileExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileExpr([NotNull] TigerParser.WhileExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>IfExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfExpr([NotNull] TigerParser.IfExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IfExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfExpr([NotNull] TigerParser.IfExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>LtExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLtExpr([NotNull] TigerParser.LtExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LtExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLtExpr([NotNull] TigerParser.LtExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>GtExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGtExpr([NotNull] TigerParser.GtExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GtExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGtExpr([NotNull] TigerParser.GtExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>GeExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGeExpr([NotNull] TigerParser.GeExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GeExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGeExpr([NotNull] TigerParser.GeExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>LeExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLeExpr([NotNull] TigerParser.LeExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LeExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLeExpr([NotNull] TigerParser.LeExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Assignment</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] TigerParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Assignment</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] TigerParser.AssignmentContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>RecordCreation</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRecordCreation([NotNull] TigerParser.RecordCreationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RecordCreation</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRecordCreation([NotNull] TigerParser.RecordCreationContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>NeqExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNeqExpr([NotNull] TigerParser.NeqExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NeqExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNeqExpr([NotNull] TigerParser.NeqExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionCall</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] TigerParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionCall</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] TigerParser.FunctionCallContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ParenNestExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenNestExpr([NotNull] TigerParser.ParenNestExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenNestExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenNestExpr([NotNull] TigerParser.ParenNestExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>IntegerLiteral</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegerLiteral([NotNull] TigerParser.IntegerLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IntegerLiteral</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegerLiteral([NotNull] TigerParser.IntegerLiteralContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>LetExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLetExpr([NotNull] TigerParser.LetExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LetExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLetExpr([NotNull] TigerParser.LetExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>MultExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultExpr([NotNull] TigerParser.MultExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MultExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultExpr([NotNull] TigerParser.MultExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>SubExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubExpr([NotNull] TigerParser.SubExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SubExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubExpr([NotNull] TigerParser.SubExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>AddExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddExpr([NotNull] TigerParser.AddExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AddExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddExpr([NotNull] TigerParser.AddExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>OrExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrExpr([NotNull] TigerParser.OrExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OrExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrExpr([NotNull] TigerParser.OrExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>Nil</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNil([NotNull] TigerParser.NilContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Nil</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNil([NotNull] TigerParser.NilContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>DivExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivExpr([NotNull] TigerParser.DivExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DivExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivExpr([NotNull] TigerParser.DivExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>StringLiteral</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringLiteral([NotNull] TigerParser.StringLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StringLiteral</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringLiteral([NotNull] TigerParser.StringLiteralContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>EqExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqExpr([NotNull] TigerParser.EqExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EqExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqExpr([NotNull] TigerParser.EqExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ArrayCreation</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayCreation([NotNull] TigerParser.ArrayCreationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrayCreation</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayCreation([NotNull] TigerParser.ArrayCreationContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ForExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForExpr([NotNull] TigerParser.ForExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForExpr([NotNull] TigerParser.ForExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>LeftVal</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLeftVal([NotNull] TigerParser.LeftValContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LeftVal</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLeftVal([NotNull] TigerParser.LeftValContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>NegationExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNegationExpr([NotNull] TigerParser.NegationExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NegationExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNegationExpr([NotNull] TigerParser.NegationExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>BreakExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreakExpr([NotNull] TigerParser.BreakExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BreakExpr</c>
	/// labeled alternative in <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreakExpr([NotNull] TigerParser.BreakExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] TigerParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] TigerParser.ProgramContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.decs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecs([NotNull] TigerParser.DecsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.decs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecs([NotNull] TigerParser.DecsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.dec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDec([NotNull] TigerParser.DecContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.dec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDec([NotNull] TigerParser.DecContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.tydec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTydec([NotNull] TigerParser.TydecContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.tydec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTydec([NotNull] TigerParser.TydecContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.ty"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTy([NotNull] TigerParser.TyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.ty"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTy([NotNull] TigerParser.TyContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.tyfields"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTyfields([NotNull] TigerParser.TyfieldsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.tyfields"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTyfields([NotNull] TigerParser.TyfieldsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.field"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterField([NotNull] TigerParser.FieldContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.field"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitField([NotNull] TigerParser.FieldContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.typeid"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeid([NotNull] TigerParser.TypeidContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.typeid"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeid([NotNull] TigerParser.TypeidContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.vardec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVardec([NotNull] TigerParser.VardecContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.vardec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVardec([NotNull] TigerParser.VardecContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.fundec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFundec([NotNull] TigerParser.FundecContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.fundec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFundec([NotNull] TigerParser.FundecContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.lvalue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLvalue([NotNull] TigerParser.LvalueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.lvalue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLvalue([NotNull] TigerParser.LvalueContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.exprs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprs([NotNull] TigerParser.ExprsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.exprs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprs([NotNull] TigerParser.ExprsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr([NotNull] TigerParser.ExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TigerParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr([NotNull] TigerParser.ExprContext context);
}
} // namespace Tiger.ANTLR
